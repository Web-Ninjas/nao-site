<?php

namespace AppBundle\Repository;

use InvalidArgumentException;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function countNbUsers()
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select('COUNT(u.id)');

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function listeUsersNonSupprimer()
    {
        $qb = $this->createQueryBuilder('u');
        $qb
            ->orderBy('u.id', 'desc')
            ->andWhere('u.deleted IS NULL');

        return $qb->getQuery()->getResult();
    }

    /**
     * Récupère une liste d'articles triés et paginés.
     *
     * @param int $page Le numéro de la page
     * @param int $nbMaxParPage Nombre maximum d'article par page
     *
     * @throws InvalidArgumentException
     * @throws NotFoundHttpException
     *
     * @return Paginator
     */
    public function findAllTrie()
    {
        $qb = $this->createQueryBuilder('u')
            ->select('u')
            ->addSelect('COUNT(DISTINCT a.id) as c_aid')
            ->addSelect('COUNT(DISTINCT o.id) as c_oid')
            ->andWhere('u.deleted IS NULL')
            ->leftJoin('u.observations', 'o')
            ->leftJoin('u.articles', 'a')
            ->groupBy('u.id');
            ;

        $query = $qb->getQuery();
        return $query->getResult();
    }

}

